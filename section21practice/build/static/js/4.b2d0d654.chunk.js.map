{"version":3,"sources":["components/quotes/NoQuotesFound.js","components/quotes/NoQuotesFound.module.css","components/comments/Comments.module.css","components/comments/CommentItem.module.css","components/comments/CommentsList.module.css","components/comments/NewCommentForm.module.css","components/quotes/HighlightedQuote.module.css","components/comments/CommentItem.js","components/comments/CommentsList.js","components/comments/NewCommentForm.js","components/comments/Comments.js","components/quotes/HighlightedQuote.js","pages/QuoteDetail.js"],"names":["NoQuotesFound","className","classes","noquotes","to","module","exports","CommentItem","props","item","text","CommentsList","console","log","comments","map","comment","id","NewCommentForm","commentTextRef","useRef","useHttp","addComment","sendRequest","status","error","onAddedComment","quoteId","useEffect","submitFormHandler","event","preventDefault","enteredText","current","value","commentData","form","onSubmit","LoadingSpinner","control","htmlFor","rows","ref","actions","Comments","useState","isAddingComment","setIsAddingComment","useParams","getAllComments","loadedComments","data","addedCommentHanldler","useCallback","length","onClick","HighlightedQuote","quote","author","QuoteDetail","params","match","useRouteMatch","getSingleQuote","quoteDetail","path","exact","url"],"mappings":"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","file":"static/js/4.b2d0d654.chunk.js","sourcesContent":["import { Link } from 'react-router-dom';\nimport classes from './NoQuotesFound.module.css';\n\nconst NoQuotesFound = () => {\n  return (\n    <div className={classes.noquotes}>\n      <p>No quotes found!</p>\n      <Link className='btn' to='/new-quote'>\n        Add a Quote\n      </Link>\n    </div>\n  );\n};\n\nexport default NoQuotesFound;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"noquotes\":\"NoQuotesFound_noquotes__3DIYb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"Comments_comments__iZX-v\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"CommentItem_item__24mbD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"CommentsList_comments__valp0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"NewCommentForm_form__2Te8b\",\"loading\":\"NewCommentForm_loading__2veC2\",\"control\":\"NewCommentForm_control__3NVeP\",\"actions\":\"NewCommentForm_actions__2fwWP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"quote\":\"HighlightedQuote_quote__nE9T6\"};","import classes from './CommentItem.module.css';\n\nconst CommentItem = (props) => {\n  return (\n    <li className={classes.item}>\n      <p>{props.text}</p>\n    </li>\n  );\n};\n\nexport default CommentItem;\n","import CommentItem from './CommentItem';\nimport classes from './CommentsList.module.css';\n\nconst CommentsList = (props) => {\n  console.log(props.comments)\n  return (\n    <ul className={classes.comments}>\n      {props.comments.map((comment) => (\n        <CommentItem key={comment.id} text={comment.text} />\n      ))}\n    </ul>\n  );\n};\n\nexport default CommentsList;\n","import { useEffect, useRef } from 'react';\nimport useHttp from '../../hooks/use-http';\nimport { addComment } from '../../lib/api';\nimport LoadingSpinner from '../UI/LoadingSpinner';\n\nimport classes from './NewCommentForm.module.css';\n\nconst NewCommentForm = (props) => {\n  const commentTextRef = useRef();\n  const {sendRequest,status,error}= useHttp(addComment);\n  const {onAddedComment,quoteId}=props;\n  useEffect(() => {\n    if(status === 'completed' && !error){\n      onAddedComment();\n    }\n  }, [status,error,onAddedComment])\n  const submitFormHandler = (event) => {\n    event.preventDefault();\n    const enteredText= commentTextRef.current.value;\n    // optional: Could validate here\n   \n    // send comment to server\n    sendRequest({commentData:enteredText,quoteId:quoteId})\n  };\n\n  return (\n    <form className={classes.form} onSubmit={submitFormHandler}>\n      {status === 'pending' && <div className='centered'><LoadingSpinner/></div>}\n      <div className={classes.control} onSubmit={submitFormHandler}>\n        <label htmlFor='comment'>Your Comment</label>\n        <textarea id='comment' rows='5' ref={commentTextRef}></textarea>\n      </div>\n      <div className={classes.actions}>\n        <button className='btn'>Add Comment</button>\n      </div>\n    </form>\n  );\n};\n\nexport default NewCommentForm;\n","import { useCallback, useEffect, useState } from 'react';\nimport { useParams } from 'react-router';\nimport useHttp from '../../hooks/use-http';\nimport { getAllComments } from '../../lib/api';\nimport LoadingSpinner from '../UI/LoadingSpinner';\n\nimport classes from './Comments.module.css';\nimport CommentsList from './CommentsList';\nimport NewCommentForm from './NewCommentForm';\n\nconst Comments = () => {\n  const [isAddingComment, setIsAddingComment] = useState(false);\n  const params = useParams();\n  const {quoteId}=params;\n  const {sendRequest,data: loadedComments,status,error}=useHttp(getAllComments);\n  useEffect(() => {\n    sendRequest(quoteId);\n  }, [quoteId,sendRequest]);\n  const startAddCommentHandler = () => {\n    setIsAddingComment(true);\n  };\n  const addedCommentHanldler=useCallback(()=>{\n    sendRequest(quoteId);\n  },[])\n  let comments;\n  if(status === 'pending'){\n    comments= <div className='centered'>\n      <LoadingSpinner/>\n    </div>\n  }\n  if(status=== 'completed' && loadedComments && loadedComments.length>0){\n    comments = <CommentsList comments={loadedComments}/>\n  }\n  if(status=== 'completed' && (!loadedComments || loadedComments.length === 0)){\n    comments = <p className='centered'> Not comments were added yet</p>\n  }\n  return (\n    <section className={classes.comments}>\n      <h2>User Comments</h2>\n      {!isAddingComment && (\n        <button className='btn' onClick={startAddCommentHandler}>\n          Add a Comment\n        </button>\n      )}\n      {isAddingComment && <NewCommentForm onAddedComment={addedCommentHanldler} quoteId={quoteId}/>}\n      {comments}\n    </section>\n  );\n};\n\nexport default Comments;\n","import classes from './HighlightedQuote.module.css';\n\nconst HighlightedQuote = (props) => {\n  return (\n    <figure className={classes.quote}>\n      <p>{props.text}</p>\n      <figcaption>{props.author}</figcaption>\n    </figure>\n  );\n};\n\nexport default HighlightedQuote;\n","import { useEffect } from \"react\";\nimport { Route, useParams, useRouteMatch } from \"react-router\";\nimport { Link } from \"react-router-dom\";\nimport Comments from \"../components/comments/Comments\";\nimport HighlightedQuote from \"../components/quotes/HighlightedQuote\";\nimport NoQuotesFound from \"../components/quotes/NoQuotesFound\";\nimport LoadingSpinner from \"../components/UI/LoadingSpinner\";\nimport useHttp from \"../hooks/use-http\";\nimport { getSingleQuote } from \"../lib/api\";\nconst DUMMY_QUOTES = [\n  { id: \"q1\", author: \"Max\", text: \"Learning React is fun!\" },\n  { id: \"q2\", author: \"Maximilian\", text: \"Learning React is great!\" },\n];\nconst QuoteDetail = () => {\n  const params = useParams();\n  const match = useRouteMatch();\n  const { quoteId } = params;\n  const {\n    sendRequest,\n    status,\n    data: quoteDetail,\n    error,\n  } = useHttp(getSingleQuote,true);\n  useEffect(() => {\n    sendRequest(quoteId);\n  }, [sendRequest, quoteId]);\n  if (status === \"pending\") {\n    return (\n      <div className=\"centered\">\n        <LoadingSpinner />\n      </div>\n    );\n  }\n  if (error) {\n    return (\n      <div className=\"centered focused\">\n        <p> {error}</p>\n      </div>\n    );\n  }\n  if (!quoteDetail.text ) {\n    return <p>No quote detail founded</p>;\n  }\n  return (\n    <>\n      <HighlightedQuote text={quoteDetail.text} author={quoteDetail.author} />\n      <Route path={`${match.path}`} exact>\n        <div className=\"centered\">\n          <Link className=\"btn--flat\" to={`${match.url}/comments`}></Link>\n        </div>\n      </Route>\n      <Route path={`${match.path}/comments`}>\n        <Comments />\n      </Route>\n    </>\n  );\n};\nexport default QuoteDetail;\n"],"sourceRoot":""}